// hsv.fs.txt (sm4)

in vec3 v_normal;
in vec4 v_color;
in vec2 v_texcoord;

out vec4 out_color;

vec3 hsv_to_rgb(vec3 hsv)
{
    vec3 rgb = hsv.zzz;
    if (hsv.y != 0)
    {
       float var_h = hsv.x * 6.0;
       float var_i = floor(var_h);   // Or ... var_i = floor(var_h)
       float var_1 = hsv.z * (1.0 - hsv.y);
       float var_2 = hsv.z * (1.0 - hsv.y * (var_h - var_i));
       float var_3 = hsv.z * (1.0 - hsv.y * (1 - (var_h - var_i)));
       if      (var_i == 0) { rgb = vec3(hsv.z, var_3, var_1); }
       else if (var_i == 1) { rgb = vec3(var_2, hsv.z, var_1); }
       else if (var_i == 2) { rgb = vec3(var_1, hsv.z, var_3); }
       else if (var_i == 3) { rgb = vec3(var_1, var_2, hsv.z); }
       else if (var_i == 4) { rgb = vec3(var_3, var_1, hsv.z); }
       else                 { rgb = vec3(hsv.z, var_1, var_2); }
   }
   return rgb;
}

void main(void)
{
    vec3 L = vec3(0.0, 0.0, -1.0);
    vec3 N = normalize(v_normal);
    float ln = dot(L, N);
    float ln_clamped = clamp(ln, 0.0, 1.0);
    vec4 color = pow(ln_clamped, 1.0/2.2) * v_color;
    out_color = vec4(color.xyz, v_color.a);
    out_color = vec4(v_texcoord.yx, 0.0, v_color.a);
    vec3 hsv = vec3(v_texcoord.x, 1.0, 1.0);
    vec3 rgb = hsv_to_rgb(hsv);
    float a = 2.0;
    float r = pow(rgb.r, 1.0 / a);
    float g = pow(rgb.g, 1.0 / a);
    float b = pow(rgb.b, 1.0 / a);
    out_color = vec4(r, g, b, 1.0);
}

