// gbuffer.fs.txt (sm4)

in vec3 v_normal;
in vec3 v_tangent;
in vec4 v_color;
in vec2 v_texcoord;
in vec4 v_position_in_view;

layout(location = 0) out vec4 out_emission;
layout(location = 1) out vec4 out_albedo;
layout(location = 2) out vec4 out_normal_tangent;
layout(location = 3) out vec4 out_material;

vec2 cartesian_to_spherical(vec3 v)
{
   vec2 s;
   s.x = acos(v.z); // theta
   s.y = atan(v.y, v.x); // phi
   return s;
}

vec3 spherical_to_cartesian(vec2 s)
{
   vec3 v;
   v.x = sin(s.x) * cos(s.y);
   v.y = sin(s.x) * sin(s.y);
   v.z = cos(s.x);
   return v;
}

void main(void)
{
    vec3 N = normalize(v_normal);
    vec3 T = normalize(v_tangent);
    out_emission           = vec4(0.0, 0.0, 0.0, 0.0);
    out_albedo             = vec4(1.0, 1.0, 1.0, 1.0);
    out_normal_tangent.xy  = cartesian_to_spherical(N);
    out_normal_tangent.zw  = cartesian_to_spherical(T);
    out_material.w         = material.material_parameters.x;
    out_material.xyz       = v_position_in_view.xyz;
}

