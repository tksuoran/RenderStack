layout(location = 0) out vec4 out_emission;

vec3 spherical_to_cartesian(vec2 s)
{
   vec3 v;
   v.x = sin(s.x) * cos(s.y);
   v.y = sin(s.x) * sin(s.y);
   v.z = cos(s.x);
   return v;
}

vec3 homogenize(vec4 value)
{
   if (value.w != 0.0)
      return value.xyz / value.w;
   else
      return value.xyz;
}

vec3 unproject(
   vec2  fragment_position, 
   float fragment_depth
)
{
   float viewport_x        = camera.viewport.x;
   float viewport_y        = camera.viewport.y;
   float viewport_width    = camera.viewport.z;
   float viewport_height   = camera.viewport.w;
   vec4 clip;
   vec4 world;

   clip.x = (fragment_position.x - viewport_x + 0.5) / viewport_width  * 2.0 - 1.0;
   clip.y = (fragment_position.y - viewport_y + 0.5) / viewport_height * 2.0 - 1.0;
   clip.z = 2.0 * fragment_depth - 1.0f;
   clip.w = 1.0f;

   world = camera.world_from_clip * clip;

   return homogenize(world);
}

vec3 evaluate_brdf(
   vec3 albedo,
   vec3 N,
   vec3 T,
   vec3 B,
   vec3 L,
   vec3 V
)
{
   float r              = 0.01; // TODO
   float p              = 0.1; // TODO

   float light_distance = length(L);
   L                    = normalize(L);
   float p2             = p * p;
   float one_minus_r    = 1.0 - r;
   float one_minus_p2   = 1.0 - p2;
   vec3  s              = normalize(lights.direction.xyz);
   float vn             = dot(V, N);
   float vn_clamped     = max(vn, 0.0);
   float ls             = dot(L, s);
   float ls_clamped     = max(ls, 0.0);
   float gvn_denom      = r + one_minus_r * vn_clamped;
   vec3  C              = albedo;
   vec3  one_minus_C    = vec3(1.0, 1.0, 1.0) - C;
   vec3  S              = C + one_minus_C * pow(1.0 - vn_clamped, 5.0);

   vec3  exitant_radiance = vec3(0.0);
   float ln = dot(L, N);

   if (ln > 0.0)
   {
      float spot_cutoff = 0.9340;
      if (ls_clamped > spot_cutoff)
      {
         float ln_clamped  = max(ln, 0.0);
         vec3  H           = normalize(L + V);
         float hn          = dot(H, N);
         float hv          = dot(H, V);
         float hn_clamped  = max(hn, 0.0);
         float hv_clamped  = max(hv, 0.0);
         float ht          = dot(H - hn * N, T);
         float ht_clamped  = max(ht, 0.0);
         float hn2         = hn * hn;
         float ht2         = ht * ht;
         float aht_denom   = sqrt(p2 + one_minus_p2 * ht2);
         float gln_denom   = (r   + one_minus_r * ln);
         float zhn0        = (1.0 - one_minus_r * hn * hn);
         float D           = (ln_clamped * r * p2) / (gvn_denom * gln_denom * zhn0 * zhn0 * aht_denom);

         float light_attenuation = 1.0 / (light_distance * light_distance);

         float t = ls_clamped - spot_cutoff;
         t /= (1.0 - spot_cutoff);
         //t = smoothstep(0.0, 1.0, t);
         t = pow(t, 4.0);
         light_attenuation *= t; // ls_clamped;

         float light_visibility  = 1.0;
         vec3  incident_radiance = lights.radiance * light_visibility * light_attenuation;


         exitant_radiance += incident_radiance * C * ln_clamped;  //  diffuse
         exitant_radiance += incident_radiance * S * D;           //  specular
      }
   }

   return exitant_radiance;
}

void main(void)
{
   ivec2 tc                = ivec2(gl_FragCoord.xy);
   float g_depth           = texelFetch(depth_texture, tc, 0);
   vec3  g_position        = unproject(gl_FragCoord.xy, g_depth);
   vec4  g_material        = texelFetch(material_texture, tc, 0);

   if (g_material.w == 0.0)
      discard;

   vec4  g_albedo          = texelFetch(albedo_texture, tc, 0);
   vec4  g_normal_tangent  = texelFetch(normal_tangent_texture, tc, 0);// * 3.1415926535897932384626433;

   vec3  N                 = spherical_to_cartesian(g_normal_tangent.xy);
   vec3  B                 = spherical_to_cartesian(g_normal_tangent.zw);
   vec3  T                 = cross(B, N);

   vec3  L                 = lights.position - g_position;

   vec3 view_position_in_world = vec3(
      camera.world_from_view[3][0],
      camera.world_from_view[3][1],
      camera.world_from_view[3][2]
   );

   vec3  V                 = normalize(view_position_in_world - g_position);

   vec3 brdf = evaluate_brdf(g_albedo.xyz, N, T, B, L, V);

   out_emission.rgb = brdf;
   out_emission.a = 1.0;

   // out_emission.rgb = 0.5 * normalize(V) + vec3(0.5); //(0.5 * N) + vec3(0.5)

   // vec3  s              = normalize(lights.direction.xyz);
   // float ls             = dot(L, s);
   // float ls_clamped     = max(ls, 0.0);
   // 
   // float ln             = dot(L, N);
   // float ln_clamped     = max(ln, 0.0);
   // 
   // 
   // if (ls_clamped > 0.9340)
   //    out_emission.b = ln_clamped * lights.radiance.b;
   // else
   //    out_emission.b = 0.1 * ln_clamped * lights.radiance.b;

}

// //vec3  s              = vec3(0.0, 1.0, 0.0);
// vec3  s              = normalize(lights.direction.xyz);
// float ls             = dot(L, s);
// float ls_clamped     = max(ls, 0.0);
// 
// float ln             = dot(L, N);
// float ln_clamped     = max(ln, 0.0);
// 
// 
// if (ls_clamped > 0.9340)
//    out_emission.rgb = vec3(ln_clamped) * lights.radiance;
// else
//    out_emission.rgb = 0.1 * vec3(ln_clamped) * lights.radiance;
// 
// //out_emission.rgb = 0.5 * L + vec3(0.5); //(0.5 * N) + vec3(0.5)


